spring.application.name=stream-hello
server.port=9000
spring.rabbitmq.addresses=127.0.0.1
spring.rabbitmq.username=jason
spring.rabbitmq.password=jason123456
spring.rabbitmq.publisher-confirms=true
spring.rabbitmq.virtual-host=/
spring.rabbitmq.connection-timeout=60000
##两个通道配置相同的目标Topic来将这一对输入输出指向同一个实际的Topic
##输入(出)通道对应的主题名
spring.cloud.stream.bindings.example-topic-input.destination=delay-topic
spring.cloud.stream.bindings.example-topic-output.destination=delay-topic
spring.cloud.stream.rabbit.bindings.example-topic-output.producer.delayed-exchange=true
##该应用实例都属于test消费组
spring.cloud.stream.bindings.example-topic-input.group=test
##开启延迟消息的功能，这样在创建exchange的时候，会将其设置为具有延迟特性的exchange
spring.cloud.stream.rabbit.bindings.example-topic-input.consumer.delayed-exchange=true
##默认情况下Spring Cloud Stream会重试3次，我们也可以通过配置的方式修改这个默认配置，该配置可以将重试次数调整为1次
##spring.cloud.stream.bindings.example-topic-input.consumer.max-attempts=1
##开启DLQ（死信队列）
spring.cloud.stream.rabbit.bindings.example-topic-input.consumer.auto-bind-dlq=true
##控制DLQ队列中消息的存活时间，当超过配置时间之后，该消息会自动的从DLQ队列中移除
spring.cloud.stream.rabbit.bindings.example-topic-input.consumer.dlq-ttl=10000
##默认是false，如果设置了死信队列的时候，会将消息原封不动的发送到死信队列
spring.cloud.stream.rabbit.bindings.example-topic-input.consumer.republish-to-dlq=true
##消息消费失败之后，并不会将该消息抛弃，而是将消息重新放入队列
spring.cloud.stream.rabbit.bindings.example-topic-input.consumer.requeue-rejected=true